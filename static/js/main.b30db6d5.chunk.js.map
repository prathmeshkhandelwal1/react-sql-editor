{"version":3,"sources":["Components/Editor/Editor.js","Components/Nav/Nav.js","Components/queryResult/ResultItem/ResultItem.js","Components/queryResult/Result.js","Util/Loader/Loader.js","Components/RulePage/Page.js","Components/Error/Error.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","mode","theme","onChange","e","handleQuery","name","editorProps","$blockScrolling","style","height","width","setOptions","showLineNumbers","wrap","hScrollBarAlwaysVisible","vScrollBarAlwaysVisible","tabSize","cursorStyle","fontSize","value","query","placeholder","Nav","className","onClick","download","ResultItem","state","customerID","details","contactName","companyName","country","phone","onChangeHandler","setState","target","type","this","Component","Result","list","Array","from","result","map","item","id","Loader","class","Page","Error","useState","showModal","setShowModal","console","log","err","hasErrorHandler","margin","padding","color","textAlign","App","setquery","loading","setLoading","data","setData","setResult","setErr","hasError","setHasError","useEffect","alasql","promise","then","catch","downloadResults","push","Object","keys","join","res","values","blob","Blob","href","window","URL","createObjectURL","link","document","createElement","setAttribute","body","appendChild","click","display","background","fetch","text","marginLeft","fontStyle","justifyContent","alignItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b30db6d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-sql\";\r\nimport \"ace-builds/src-noconflict/theme-pastel_on_dark\";\r\n\r\nconst Editor = (props) => {\r\n  return (\r\n    <AceEditor\r\n      mode=\"sql\"\r\n      theme=\"pastel_on_dark\"\r\n      onChange={(e) => props.handleQuery(e)}\r\n      name=\"UNIQUE_ID_OF_DIV\"\r\n      editorProps={{ $blockScrolling: true }}\r\n      style={{ height: \"75vh\", width: \"50vw\" }}\r\n      setOptions={{\r\n        showLineNumbers: true,\r\n        wrap: true,\r\n        hScrollBarAlwaysVisible: false,\r\n        vScrollBarAlwaysVisible: false,\r\n        tabSize: 2,\r\n        cursorStyle: \"smooth\",\r\n      }}\r\n      fontSize=\"16px\"\r\n      value={props.query}\r\n      placeholder=\"Enter your queries here\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <div className=\"Nav\">\r\n      <ul className=\"list\">\r\n        <li>\r\n          SQL <span>editor</span>\r\n        </li>\r\n        <li onClick={props.download}>Download Result</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\nimport \"./ResultItem.css\";\r\n\r\nclass ResultItem extends Component {\r\n  state = {\r\n    customerID: this.props.details.customerID,\r\n    contactName: this.props.details.contactName,\r\n    companyName: this.props.details.companyName,\r\n    country: this.props.details.country,\r\n    phone: this.props.details.phone,\r\n  };\r\n\r\n  //sending query for changung data can be done here.\r\n\r\n  onChangeHandler = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"ResultItem\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"customerID\"\r\n          value={this.state.customerID}\r\n          onChange={this.onChangeHandler}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"contactName\"\r\n          value={this.state.contactName}\r\n          onChange={this.onChangeHandler}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"companyName\"\r\n          value={this.state.companyName}\r\n          onChange={this.onChangeHandler}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"country\"\r\n          value={this.state.country}\r\n          onChange={this.onChangeHandler}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"phone\"\r\n          value={this.state.phone}\r\n          onChange={this.onChangeHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResultItem;\r\n","import React from \"react\";\r\nimport ResultItem from \"./ResultItem/ResultItem\";\r\nimport \"./Result.css\";\r\n\r\nfunction Result(props) {\r\n  const list = Array.from(props.result).map((item) => (\r\n    <ResultItem details={item} />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"resultContainer\">\r\n      <ul className=\"headList\">\r\n        <li className=\"list-item\">CustomerID</li>\r\n        <li className=\"list-item\">Name</li>\r\n        <li className=\"list-item\">Company </li>\r\n        <li className=\"list-item\">Country</li>\r\n        <li className=\"list-item\">Phone</li>\r\n      </ul>\r\n      <div className=\"list-container\" id=\"style-3\">\r\n        {list}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport \"./Loader.css\";\r\nfunction Loader() {\r\n  return <div class=\"lds-dual-ring\"></div>;\r\n}\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport \"./Page.css\";\r\n\r\nfunction Page() {\r\n  return (\r\n    <div className=\"page\">\r\n      <p>Easily query your data.</p>\r\n      <p>You can edit your data directly from result</p>\r\n      <p>\r\n        You can use sql clauses in your query, go and try pasting below line to\r\n        your editor\r\n      </p>\r\n      <p>{`SELECT * FROM CSV(?, {headers: true, separator:','}) where customerID='ALFKI';`}</p>\r\n      <p>and then try by removing where caluse</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import React, { useState } from \"react\";\r\nimport \"./Error.css\";\r\n\r\nconst Error = (props) => {\r\n  const [showModal, setShowModal] = useState(true);\r\n\r\n  const handleModal = () => {\r\n    setShowModal(false);\r\n    props.hasErrorHandler();\r\n  };\r\n\r\n  console.log(props.err);\r\n  const res = showModal ? (\r\n    <div onClick={handleModal} className=\"Error\" id=\"error\">\r\n      \r\n      <div className=\"close\">\r\n        <p>x</p>\r\n      </div>\r\n      <h1 style={{ margin: \"0\", padding: \"10px 0\", color:'red', textAlign:'center' }}>OOPS! There is an Error</h1>\r\n      <div className=\"textarea\">{props.err}</div>\r\n    </div>\r\n  ) : null;\r\n  return res;\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./Components/Editor/Editor\";\nimport Nav from \"./Components/Nav/Nav\";\nimport Result from \"./Components/queryResult/Result\";\nimport \"./App.css\";\nimport Loader from \"./Util/Loader/Loader\";\nimport Page from \"./Components/RulePage/Page\";\nimport alasql from \"alasql\";\nimport Error from \"./Components/Error/Error\";\n\nconst App = () => {\n  const [query, setquery] = useState(\n    \"SELECT * FROM CSV(?, {headers: true, separator:','})\"\n  );\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [result, setResult] = useState(null);\n  const [err, setErr] = useState(null);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    if (data && !hasError) {\n      console.log(query);\n      alasql\n        .promise(query, [data])\n        .then(function (data) {\n          setData(null);\n          console.log(data);\n          setResult(data);\n        })\n        .catch((e) => {\n          console.log(e);\n          setErr(\"Syntax Error!\");\n          setHasError(true);\n        });\n    }\n  });\n\n  const handleQuery = (e) => {\n    console.log(e);\n    setquery(e);\n  };\n\n  const hasErrorHandler = () => {\n    setHasError(false);\n    setErr(null);\n    setData(null);\n    setquery(\"SELECT * FROM CSV(?, {headers: true, separator:','})\");\n  };\n\n  const onSubmit = () => {\n    // we can connect query to backend here!\n    // query has been updated to state\n    //showing dummy data due to lack of backend\n    setResult(null);\n    setLoading(true);\n    fetch(\n      \"https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/csv/customers.csv\"\n    )\n      .then((res) => res.text())\n      .then((data) => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setErr(\"Api could'nt be fetched!\");\n        setHasError(true);\n      });\n  };\n\n  function download() {\n    let downloadResults = [];\n    downloadResults.push(Object.keys(result[0]).join(\", \"));\n    for (let res of result) {\n      downloadResults.push(Object.values(res).join(\", \"));\n    }\n\n    let blob = new Blob([downloadResults.join(\"\\n\")], { type: \"text/csv\" });\n    let href = window.URL.createObjectURL(blob);\n    let link = document.createElement(\"a\");\n    link.setAttribute(\"href\", href);\n    link.setAttribute(\"download\", \"my_data.csv\");\n    document.body.appendChild(link);\n    link.click();\n  }\n\n  return (\n    <>\n      {hasError ? (\n        <Error\n          hasError={hasError}\n          hasErrorHandler={hasErrorHandler}\n          err={err}\n        />\n      ) : null}\n\n      <Nav download={download} />\n      <div style={{ display: \"flex\" }}>\n        <div style={{ height: \"90vh\", background: \"#2C2828\" }}>\n          <Editor query={query} handleQuery={handleQuery} />\n          <div className=\"tile2\">\n            <button onClick={onSubmit} className=\"btn\">\n              Run\n            </button>\n            {loading ? <Loader /> : null}\n          </div>\n          <p\n            style={{\n              marginLeft: \"20px\",\n              fontSize: \"10px\",\n              fontStyle: \"italic\",\n              color: \"white\",\n            }}\n          >\n            *Dummy csv file is used to fetch data.\n          </p>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"50vw\",\n            background: \"#1b1a17\",\n          }}\n        >\n          {loading ? (\n            <Loader />\n          ) : result ? (\n            <Result result={result} />\n          ) : (\n            <Page />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}